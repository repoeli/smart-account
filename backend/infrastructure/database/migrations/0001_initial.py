# Generated by Django 4.2.7 on 2025-08-05 15:24

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(db_index=True, max_length=254, unique=True),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("accounting_company", "Accounting Company"),
                        ],
                        default="individual",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                            ("pending_verification", "Pending Verification"),
                        ],
                        default="pending_verification",
                        max_length=20,
                    ),
                ),
                ("company_name", models.CharField(max_length=255)),
                ("business_type", models.CharField(max_length=100)),
                ("tax_id", models.CharField(blank=True, max_length=50, null=True)),
                ("vat_number", models.CharField(blank=True, max_length=50, null=True)),
                ("address_street", models.TextField(blank=True, null=True)),
                (
                    "address_city",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "address_postal_code",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("address_country", models.CharField(default="UK", max_length=100)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in UK format: +44 XXXXXXXXXX",
                                regex="^\\+44\\s?\\d{10,11}$",
                            )
                        ],
                    ),
                ),
                (
                    "subscription_tier",
                    models.CharField(
                        choices=[
                            ("basic", "Basic"),
                            ("premium", "Premium"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="basic",
                        max_length=20,
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("timezone", models.CharField(default="Europe/London", max_length=50)),
                ("language", models.CharField(default="en", max_length=10)),
                ("notification_preferences", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(db_index=True, max_length=255, unique=True),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_sessions",
                "indexes": [
                    models.Index(
                        fields=["user"], name="user_sessio_user_id_eb20aa_idx"
                    ),
                    models.Index(
                        fields=["session_key"], name="user_sessio_session_cc84b9_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="user_sessio_is_acti_1b3cb1_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="user_sessio_expires_66ae96_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserAuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("event_type", models.CharField(max_length=100)),
                ("event_data", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_audit_logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user"], name="user_audit__user_id_74a7fc_idx"
                    ),
                    models.Index(
                        fields=["event_type"], name="user_audit__event_t_3b6ec3_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="user_audit__created_935a41_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.CharField(db_index=True, max_length=255, unique=True)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "password_reset_tokens",
                "indexes": [
                    models.Index(fields=["token"], name="password_re_token_060a1f_idx"),
                    models.Index(
                        fields=["user"], name="password_re_user_id_af59e2_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="password_re_expires_8e96b7_idx"
                    ),
                    models.Index(
                        fields=["is_used"], name="password_re_is_used_eabc82_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.CharField(db_index=True, max_length=255, unique=True)),
                ("email", models.EmailField(max_length=254)),
                ("expires_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "email_verification_tokens",
                "indexes": [
                    models.Index(fields=["token"], name="email_verif_token_df7c5e_idx"),
                    models.Index(
                        fields=["user"], name="email_verif_user_id_bef55e_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="email_verif_expires_770728_idx"
                    ),
                    models.Index(
                        fields=["is_used"], name="email_verif_is_used_955825_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["user_type"], name="users_user_ty_578f8f_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["status"], name="users_status_9ca66f_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["subscription_tier"], name="users_subscri_8ce858_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["company_name"], name="users_company_2f3199_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_verified"], name="users_is_veri_63cd6e_idx"),
        ),
    ]
